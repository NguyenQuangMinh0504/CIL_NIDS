2023-10-26 10:35:59,633 [trainer.py] => Time Str >>> 1026-10-35-59-633
2023-10-26 10:35:59,634 [trainer.py] => memory_per_class: 20
2023-10-26 10:35:59,634 [trainer.py] => fixed_memory: False
2023-10-26 10:35:59,634 [trainer.py] => shuffle: True
2023-10-26 10:35:59,634 [trainer.py] => model_name: memo
2023-10-26 10:35:59,634 [trainer.py] => seed: 1993
2023-10-26 10:35:59,634 [trainer.py] => dataset: cifar100
2023-10-26 10:35:59,634 [trainer.py] => init_cls: 5
2023-10-26 10:35:59,634 [trainer.py] => increment: 5
2023-10-26 10:35:59,634 [trainer.py] => convnet_type: memo_resnet32
2023-10-26 10:35:59,634 [trainer.py] => prefix: benchmark
2023-10-26 10:35:59,634 [trainer.py] => device: [device(type='cpu')]
2023-10-26 10:35:59,634 [trainer.py] => debug: False
2023-10-26 10:35:59,634 [trainer.py] => skip: False
2023-10-26 10:35:59,634 [trainer.py] => train_base: True
2023-10-26 10:35:59,634 [trainer.py] => train_adaptive: False
2023-10-26 10:35:59,634 [trainer.py] => scheduler: steplr
2023-10-26 10:35:59,634 [trainer.py] => t_max: None
2023-10-26 10:35:59,635 [trainer.py] => epochs: 170
2023-10-26 10:35:59,635 [trainer.py] => milestones: [80, 120, 150]
2023-10-26 10:35:59,635 [trainer.py] => lrate_decay: 0.1
2023-10-26 10:35:59,635 [trainer.py] => batch_size: 128
2023-10-26 10:35:59,635 [trainer.py] => lrate: 0.1
2023-10-26 10:35:59,635 [trainer.py] => weight_decay: 0.0002
2023-10-26 10:35:59,635 [trainer.py] => alpha_aux: 1.0
2023-10-26 10:35:59,635 [trainer.py] => config: ./exps/memo.json
2023-10-26 10:35:59,635 [trainer.py] => time_str: 1026-10-35-59-633
2023-10-26 10:35:59,635 [trainer.py] => exp_name: 1026-10-35-59-633_cifar100_memo_resnet32_1993_B0_Inc5
2023-10-26 10:35:59,635 [trainer.py] => logfilename: logs/benchmark/cifar100/memo/1026-10-35-59-633_cifar100_memo_resnet32_1993_B0_Inc5
2023-10-26 10:35:59,635 [trainer.py] => csv_name: cifar100_1993_memo_resnet32_B0_Inc5
2023-10-26 10:36:02,159 [inc_net.py] => Task Agnostic Extractor is: <class 'convs.memo_cifar_resnet.GeneralizedResNet_cifar'>
2023-10-26 10:36:02,159 [inc_net.py] => Task agnostic extractor structure: GeneralizedResNet_cifar(
  (conv_1_3x3): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (bn_1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (stage_1): Sequential(
    (0): ResnetBasicblock(
      (conv_a): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_a): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv_b): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_b): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (1): ResnetBasicblock(
      (conv_a): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_a): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv_b): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_b): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): ResnetBasicblock(
      (conv_a): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_a): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv_b): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_b): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (3): ResnetBasicblock(
      (conv_a): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_a): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv_b): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_b): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (4): ResnetBasicblock(
      (conv_a): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_a): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv_b): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_b): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (stage_2): Sequential(
    (0): ResnetBasicblock(
      (conv_a): Conv2d(16, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn_a): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv_b): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_b): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (downsample): DownsampleA(
        (avg): AvgPool2d(kernel_size=1, stride=2, padding=0)
      )
    )
    (1): ResnetBasicblock(
      (conv_a): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_a): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv_b): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_b): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (2): ResnetBasicblock(
      (conv_a): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_a): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv_b): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_b): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (3): ResnetBasicblock(
      (conv_a): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_a): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv_b): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_b): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (4): ResnetBasicblock(
      (conv_a): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_a): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv_b): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn_b): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
)
2023-10-26 10:36:02,160 [memo.py] => >>> train generalized blocks:True train_adaptive: False
2023-10-26 10:36:02,160 [trainer.py] => Type of model is: <class 'models.memo.MEMO'>
2023-10-26 10:36:02,160 [trainer.py] => Type of model network is: <class 'utils.inc_net.AdaptiveNet'>
2023-10-26 10:36:02,160 [trainer.py] => Start time:1698291362.160346
2023-10-26 10:36:02,160 [trainer.py] => Data manager.nb_tasks is: 20
2023-10-26 10:36:02,160 [trainer.py] => All params: 112016
2023-10-26 10:36:02,160 [trainer.py] => Trainable params: 112016
2023-10-26 10:36:02,174 [memo.py] => Learning on 0-5
2023-10-26 10:36:02,174 [memo.py] => All params: 464219
2023-10-26 10:36:02,175 [memo.py] => Trainable params: 464219
2023-10-26 10:36:02,180 [trainer.py] => current task is: 0
2023-10-26 10:37:04,614 [memo.py] => Loop enter
2023-10-26 10:37:04,616 [memo.py] => Train Generalized Blocks...
2023-10-26 10:37:04,617 [memo.py] => Exemplar size: 0
2023-10-26 10:37:04,617 [trainer.py] => No NME accuracy.
2023-10-26 10:37:04,617 [trainer.py] => CNN: {'total': 20.0, '00-09': 20.0, 'old': 0, 'new': 20.0}
2023-10-26 10:37:04,617 [trainer.py] => CNN top1 curve: [20.0]
2023-10-26 10:37:04,617 [trainer.py] => CNN top5 curve: [100.0]

2023-10-26 10:37:04,617 [trainer.py] => All params: 464219
2023-10-26 10:37:04,618 [trainer.py] => Trainable params: 464219
2023-10-26 10:37:04,639 [memo.py] => Learning on 5-10
2023-10-26 10:37:04,639 [memo.py] => All params: 816672
2023-10-26 10:37:04,640 [memo.py] => Trainable params: 465184
2023-10-26 10:37:04,689 [trainer.py] => current task is: 1
2023-10-26 10:38:19,217 [memo.py] => Exemplar size: 0
2023-10-26 10:38:19,218 [trainer.py] => No NME accuracy.
2023-10-26 10:38:19,218 [trainer.py] => CNN: {'total': 10.0, '00-09': 10.0, 'old': 20.0, 'new': 0.0}
2023-10-26 10:38:19,218 [trainer.py] => CNN top1 curve: [20.0, 10.0]
2023-10-26 10:38:19,218 [trainer.py] => CNN top5 curve: [100.0, 50.08]

2023-10-26 10:38:19,218 [trainer.py] => All params: 465184
2023-10-26 10:38:19,219 [trainer.py] => Trainable params: 465184
2023-10-26 10:38:19,235 [memo.py] => Learning on 10-15
2023-10-26 10:38:19,236 [memo.py] => All params: 1169765
2023-10-26 10:38:19,236 [memo.py] => Trainable params: 466789
2023-10-26 10:38:19,281 [trainer.py] => current task is: 2
2023-10-26 10:39:51,343 [memo.py] => Exemplar size: 0
2023-10-26 10:39:51,345 [trainer.py] => No NME accuracy.
2023-10-26 10:39:51,345 [trainer.py] => CNN: {'total': 6.67, '00-09': 10.0, '10-19': 0.0, 'old': 10.0, 'new': 0.0}
2023-10-26 10:39:51,345 [trainer.py] => CNN top1 curve: [20.0, 10.0, 6.67]
2023-10-26 10:39:51,345 [trainer.py] => CNN top5 curve: [100.0, 50.08, 33.33]

2023-10-26 10:39:51,346 [trainer.py] => All params: 466789
2023-10-26 10:39:51,346 [trainer.py] => Trainable params: 466789
2023-10-26 10:39:51,364 [memo.py] => Learning on 15-20
2023-10-26 10:39:51,365 [memo.py] => All params: 1523498
2023-10-26 10:39:51,365 [memo.py] => Trainable params: 469034
2023-10-26 10:39:51,414 [trainer.py] => current task is: 3
2023-10-26 10:41:42,377 [memo.py] => Exemplar size: 0
2023-10-26 10:41:42,379 [trainer.py] => No NME accuracy.
2023-10-26 10:41:42,379 [trainer.py] => CNN: {'total': 5.0, '00-09': 10.0, '10-19': 0.0, 'old': 6.67, 'new': 0.0}
2023-10-26 10:41:42,379 [trainer.py] => CNN top1 curve: [20.0, 10.0, 6.67, 5.0]
2023-10-26 10:41:42,379 [trainer.py] => CNN top5 curve: [100.0, 50.08, 33.33, 25.07]

2023-10-26 10:41:42,381 [trainer.py] => All params: 469034
2023-10-26 10:41:42,382 [trainer.py] => Trainable params: 469034
2023-10-26 10:41:42,408 [memo.py] => Learning on 20-25
2023-10-26 10:41:42,409 [memo.py] => All params: 1877871
2023-10-26 10:41:42,409 [memo.py] => Trainable params: 471919
2023-10-26 10:41:42,467 [trainer.py] => current task is: 4
